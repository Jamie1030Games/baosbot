class AxiosClass {
    async request(config) {
        const {
            url = '',
            method = 'GET',
            baseURL = '',
            headers = {},
            params,
            data,
            timeout,
            responseType = 'json'
        } = config;
        const requestUrl = baseURL ? baseURL + url : url;

        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
                ...headers,
            },
            body: data ? JSON.stringify(data) : undefined,
        };

        if (responseType === 'arrayBuffer') {
            if (!options.headers) options.headers = {};
            options.headers['Accept'] = 'application/octet-stream';
        }

        try {
            const response = await fetch(requestUrl, options);
            const contentType = response.headers.get('content-type');
            const isJSON = contentType && contentType.includes('application/json');

            if (responseType === 'json' || isJSON) {
                const responseData = isJSON ? await response.json() : await response.text();

                return {
                    data: responseData,
                    status: response.status,
                    statusText: response.statusText,
                    headers: response.headers,
                };
            } else {
                const responseData = await response.arrayBuffer();

                return {
                    data: responseData,
                    status: response.status,
                    statusText: response.statusText,
                    headers: response.headers,
                };
            }
        } catch (error) {
            throw this.handleRequestError(error);
        }
    }

    async head(url, config) {
        return this.request({ ...config, url, method: 'HEAD' });
    }

    get(url, config) {
        return this.request({ ...config, url, method: 'GET' });
    }

    post(url, data, config) {
        return this.request({ ...config, url, method: 'POST', data });
    }

    put(url, data, config) {
        return this.request({ ...config, url, method: 'PUT', data });
    }

    delete(url, config) {
        return this.request({ ...config, url, method: 'DELETE' });
    }

    handleRequestError(error) {
        return error;
    }
}

const axios = new AxiosClass();
module.exports = axios;
