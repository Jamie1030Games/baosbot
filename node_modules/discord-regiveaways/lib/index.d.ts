import { Client, ChatInputCommandInteraction, TextBasedChannel, Message, ButtonInteraction, CacheType } from 'pwss';
import { GiveawayCreateOptions } from './types/Giveaway';
interface GiveawaysManagerOptions {
    storage?: string;
    config?: {
        botsCanWin?: boolean;
        embedColor?: string;
        embedColorEnd?: string;
        reaction?: string;
        botName?: string;
        forceUpdateEvery?: number;
        endedGiveawaysLifetime?: number;
    };
}
declare class GiveawayManager {
    client: Client;
    options: GiveawaysManagerOptions;
    constructor(client: Client, options?: GiveawaysManagerOptions);
    create(channel: TextBasedChannel, data: GiveawayCreateOptions): Promise<Message>;
    addEntries(interaction: ButtonInteraction<CacheType>): Promise<void>;
    private removeEntries;
    isValid(giveawayId: string): Promise<boolean>;
    isEnded(giveawayId: string): Promise<boolean>;
    end(client: Client, giveawayId: string): Promise<void>;
    finish(client: Client, giveawayId: string, guildId: string, channelId: string): Promise<void>;
    private selectWinners;
    reroll(client: Client, giveawayId: string): Promise<void>;
    listEntries(interaction: ChatInputCommandInteraction, giveawayId: string): Promise<void>;
    private refresh;
    getGiveawayData(giveawayId: string): Promise<any>;
    getAllGiveawayData(): {
        giveawayId: string;
        giveawayData: import("./types/Giveaway").Giveaway;
    }[];
    delete(giveawayId: string): Promise<boolean>;
}
export { GiveawayManager };
